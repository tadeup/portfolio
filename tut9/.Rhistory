#resolvendo o problema que o dick teve no ultimo tutorial
#objetos do tipo fator são um desgraça
#além disso o ultimo elemento era "ibge", dai quando converteu ele virou um NA
indust <- read.csv2("ProdIndustrial.csv")
indust <- as.numeric(gsub(",", ".", as.character(indust[,2])))
indust <- indust[!is.na(indust)]
#baixar duas series faz elas serem separadas por TAB, que o R lê como \t
#mesmos problemas que a serie anterior exceto que desse ves os NAs são por causa da diferença do IPCA e do INPC
inflacao <- read.csv("inflacao.csv", sep = "\t")
inflacao <- as.numeric(gsub(",", ".", as.character(inflacao[,3])))
inflacao <- inflacao[!is.na(inflacao)]
#mesma coisa pra selic mensal
juros <- read.csv2("selic.csv")
juros <- as.numeric(gsub(",", ".", as.character(juros[,2])))
juros <- juros[!is.na(juros)]
#mesma coisa pra ibovespa
ibovespa <- read.csv2("ibovespa.csv")
ibovespa <- as.numeric(gsub(",", ".", as.character(ibovespa[,2])))
ibovespa <- ibovespa[!is.na(ibovespa)]
#mesma coisa pra commodity
commodity <- read.csv2("commodity.csv")
commodity <- as.numeric(gsub(",", ".", as.character(commodity[,2])))
commodity <- commodity[!is.na(commodity)]
#trabalhar com objetos TS é mais facil então...
commodity <- ts(commodity, start = c(1998, 1), frequency = 12)
ibovespa <- ts(ibovespa, start = c(1987, 1), frequency = 12)
juros <- ts(juros, start = c(1986, 7), frequency = 12)
inflacao <- ts(inflacao, start = c(1980, 1), frequency = 12)
indust <- ts(indust, start = c(2002, 1), frequency = 12)
df <- ts.intersect(commodity, ibovespa, juros, inflacao, indust)
plot(df[,5]) #indust
plot(df[,5]) #indust
indust <- diff(indust)
df <- ts.intersect(commodity, ibovespa, juros, inflacao, indust)
plot(df[,5]) #indust
plot(df[,1]) #commodity
plot(df[,2]) #ibovespa
plot(df[,3]) #juros
plot(df[,1]) #commodity
plot(df[,2]) #ibovespa
plot(df[,3]) #juros
plot(df[,4]) #inflacao
plot(df[,3]) #juros
plot(df[,4]) #inflacao
plot(df[,3]) #juros
plot(df[,1]) #commodity
plot(df[,2]) #ibovespa
plot(df[,3]) #juros
plot(df[,4]) #inflacao
plot(df[,1]) #commodity
plot(df[,2]) #ibovespa
plot(df[,3]) #juros
plot(df[,4]) #inflacao
plot(decompose(juros)$random)
plot(df[,3]) #juros
plot(decompose(juros))
plot(decompose(df[,3])$random)
plot(decompose(df[,1])$random)
plot(df[,2]) #ibovespa
plot(decompose(df[,2])$random)
plot(df[,2]) #ibovespa
apply(df, 2, Box.test)
plot(df[,1]) #commodity
library(tseries)
apply(df, 2, adf.test)
plot(diff(df[,1]))
plot(decompose(df[,1])$random) #commodity
plot(diff(df[,1])) #commodity
plot(decompose(df[,1])$random) #commodity
plot(diff(df[,3])) #juros
plot(decompose(df[,3])$random) #juros
plot(diff(df[,3])) #juros
plot(diff(df[,1])) #commodity
plot(decompose(df[,1])$random) #commodity
apply(df, 2, Box.test)
#resolvendo o problema que o dick teve no ultimo tutorial
#objetos do tipo fator são um desgraça
#além disso o ultimo elemento era "ibge", dai quando converteu ele virou um NA
indust <- read.csv2("ProdIndustrial.csv")
indust <- as.numeric(gsub(",", ".", as.character(indust[,2])))
indust <- indust[!is.na(indust)]
#baixar duas series faz elas serem separadas por TAB, que o R lê como \t
#mesmos problemas que a serie anterior exceto que desse ves os NAs são por causa da diferença do IPCA e do INPC
inflacao <- read.csv("inflacao.csv", sep = "\t")
inflacao <- as.numeric(gsub(",", ".", as.character(inflacao[,3])))
inflacao <- inflacao[!is.na(inflacao)]
#mesma coisa pra selic mensal
juros <- read.csv2("selic.csv")
juros <- as.numeric(gsub(",", ".", as.character(juros[,2])))
juros <- juros[!is.na(juros)]
#mesma coisa pra ibovespa
ibovespa <- read.csv2("ibovespa.csv")
ibovespa <- as.numeric(gsub(",", ".", as.character(ibovespa[,2])))
ibovespa <- ibovespa[!is.na(ibovespa)]
#mesma coisa pra commodity
commodity <- read.csv2("commodity.csv")
commodity <- as.numeric(gsub(",", ".", as.character(commodity[,2])))
commodity <- commodity[!is.na(commodity)]
#trabalhar com objetos TS é mais facil então...
commodity <- ts(commodity, start = c(1998, 1), frequency = 12)
ibovespa <- ts(ibovespa, start = c(1987, 1), frequency = 12)
juros <- ts(juros, start = c(1986, 7), frequency = 12)
inflacao <- ts(inflacao, start = c(1980, 1), frequency = 12)
indust <- ts(indust, start = c(2002, 1), frequency = 12)
indust <- diff(indust)
df <- ts.intersect(commodity, ibovespa, juros, inflacao, indust)
plot(df[,1]) #commodity
plot(df[,2]) #ibovespa
plot(df[,3]) #juros
plot(df[,4]) #inflacao
plot(df[,5]) #indust
apply(df, 2, adf.test)
apply(df, 2, Box.test)
commodity <- diff(commodity)
juros <- diff(juros)
df <- ts.intersect(commodity, ibovespa, juros, inflacao, indust)
apply(df, 2, adf.test)
commodity <- df[,1]
ibovespa <- df[,2]
juros <- df[,3]
inflacao <- df[,4]
library(vars)
auto.arima(indust)
library(forecast)
auto.arima(indust)
MAIC <- matrix(0,24,1)
for (k in 1:24){
fitXXX <- VAR(df, p = k)
MAIC[k,1] <- AIC(fitXXX)
}
which.min(MAIC)
plot(MAIC)
MBIC <- matrix(0, 24, 1)
for (k in 1:24){
fitXXX <- VAR(df, p = k)
MBIC[k,1] <- BIC(fitXXX)
}
which.min(MBIC)
plot(MBIC)
plot(predict(VAR(df, p=2), n.ahead = 5))
windows()
plot(predict(VAR(df, p=2), n.ahead = 5))
windows()
plot(predict(VAR(df, p=5), n.ahead = 5))
normality.test(VAR(df, p=2))
xxx<- VAR(df, p=2)
normality.test(xxx$varresult$indust$residuals)
jarque.bera.test(xxx$varresult$indust$residuals)
plot(xxx$varresult$indust$residuals)
plot(xxx$varresult$indust$residuals, type="l")
rm(MAIC)
rm(MBIC)
rm(fitXXX)
predizer <- function(df, ordem = 1, h1 = 1, h2 = 0, posNoDf = 5){
#df = matriz de variaveis endogenas
#ordem = ordem do modelo VAR
#h1 = horizonte minimo a ser predito
#h2 = horizonte maximo adicional a ser predito
#posNoDf = posição da variavel relavante no dataframe, no caso do tut é 5
#caso o Masini fale "ah, mas eu não sei o que essa função predict faz":
#https://cran.r-project.org/web/packages/vars/vars.pdf
h2 <- h1 + h2
fit <- VAR(df, ordem)
a <- predict(fit, n.ahead = h2)
y_predito <- a$fcst[[posNoDf]][,1][h1:h2]
return(y_predito)
}
gerarSerie <- function(df, MaxDefasagens=20, ordem=1, h1 = 1, h2 = 0, posNoDf = 5){
#MaxDefasagens = numero maximo de periodos que serão preditos
#essa função cria uma série prevendo um periodo a frente a variavel de interesse
#não recomendo mudar h1 nem h2
resultSet <- df[,posNoDf]
resultSet[(length(df[,posNoDf])-MaxDefasagens+1):length(df[,posNoDf])] <- 0
for(i in 1:MaxDefasagens){
serieX <- head(df, (length(df[,posNoDf])-MaxDefasagens+i))
predicX <- predizer(serieX, ordem=ordem, h1=h1, h2=h2, posNoDf=posNoDf)
resultSet[length(resultSet)-MaxDefasagens+i] <- predicX
}
return(resultSet)
}
calcResiduos <- function(serieOri, serieCortada, defasagens){
#colocar "defasagens" como um numero maior ou igua ao MaxDefasagens das outras funções
errosTot <- vector()
for(i in 1:defasagens){
erroX <- serieOri[length(serieOri)-defasagens+i] - serieCortada[length(serieOri)-defasagens+i]
erroXX <- erroX^2
errosTot <- append(errosTot, erroXX)
}
sumErros <- mean(errosTot)
#sumErros <- sum(errosTot)
return(sumErros)
}
crossValid <- function(df, MaxDefasagens=20, maxp = 20, posNoDf = 5){
#maxp = maior parametro P do modelo VAR que será testado no cross validation
informacao <- vector()
for(i in 1:maxp){
seriePredita <- gerarSerie(df, MaxDefasagens = MaxDefasagens, ordem = i, posNoDf = posNoDf)
erroQuadrado <- calcResiduos(df[,posNoDf], seriePredita, defasagens = MaxDefasagens)
informacao <- append(informacao, erroQuadrado)
}
return(informacao)
}
crossValid(df, MaxDefasagens = 80)
df <- ts.intersect(commodity, ibovespa, juros, inflacao, indust)
fit000 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 5)
#fazendo pras outras combinações
#pra achar o numero de combinações possiveis lembramos da fomrula de combinações
#c = n!/(p!(n-p)!)
#no caso vão ser:
#4!/(1!(3!)) + 4!/(2!(2!)) + 4!/(3!(1!)) = 14
df <- ts.intersect(commodity, indust)
fit001 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 2)
df <- ts.intersect(ibovespa, indust)
fit002 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 2)
df <- ts.intersect(juros, indust)
fit003 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 2)
df <- ts.intersect(inflacao, indust)
fit004 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 2)
df <- ts.intersect(commodity, ibovespa, indust)
fit005 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 3)
df <- ts.intersect(commodity, juros, indust)
fit006 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 3)
df <- ts.intersect(commodity, inflacao, indust)
fit007 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 3)
df <- ts.intersect(ibovespa, juros, indust)
fit008 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 3)
df <- ts.intersect(ibovespa, inflacao, indust)
fit009 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 3)
df <- ts.intersect(juros, inflacao, indust)
fit010 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 3)
df <- ts.intersect(commodity, ibovespa, juros, indust)
fit011 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 4)
df <- ts.intersect(commodity, juros, inflacao, indust)
fit012 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 4)
df <- ts.intersect(commodity, ibovespa, inflacao, indust)
fit013 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 4)
df <- ts.intersect(ibovespa, juros, inflacao, indust)
fit014 <- crossValid(df, MaxDefasagens = 80, maxp = 15, posNoDf = 4)
save.image("C:/Users/User 2014/Desktop/FGV/FGV/6Semestre/Econometria 2/tut9/enviroment.RData")
lista <- cbind(fit000,fit001,fit002,fit003,fit004,fit005,fit006,fit007,fit008,fit009,fit010,fit011,fit012,fit013,fit014)
which(lista == min(lista))
lista <- cbind.data.frame(fit000,fit001,fit002,fit003,fit004,fit005,fit006,fit007,fit008,fit009,fit010,fit011,fit012,fit013,fit014)
which(lista == min(lista))
which(lista == min(lista), arr.ind = T)
lista <- cbind(fit000,fit001,fit002,fit003,fit004,fit005,fit006,fit007,fit008,fit009,fit010,fit011,fit012,fit013,fit014)
which(lista == min(lista), arr.ind = T)
#resolvendo o problema que o dick teve no ultimo tutorial
#objetos do tipo fator são um desgraça
#além disso o ultimo elemento era "ibge", dai quando converteu ele virou um NA
indust <- read.csv2("ProdIndustrial.csv")
indust <- as.numeric(gsub(",", ".", as.character(indust[,2])))
indust <- indust[!is.na(indust)]
#baixar duas series faz elas serem separadas por TAB, que o R lê como \t
#mesmos problemas que a serie anterior exceto que desse ves os NAs são por causa da diferença do IPCA e do INPC
inflacao <- read.csv("inflacao.csv", sep = "\t")
inflacao <- as.numeric(gsub(",", ".", as.character(inflacao[,3])))
inflacao <- inflacao[!is.na(inflacao)]
#mesma coisa pra selic mensal
juros <- read.csv2("selic.csv")
juros <- as.numeric(gsub(",", ".", as.character(juros[,2])))
juros <- juros[!is.na(juros)]
#mesma coisa pra ibovespa
ibovespa <- read.csv2("ibovespa.csv")
ibovespa <- as.numeric(gsub(",", ".", as.character(ibovespa[,2])))
ibovespa <- ibovespa[!is.na(ibovespa)]
#mesma coisa pra commodity
commodity <- read.csv2("commodity.csv")
commodity <- as.numeric(gsub(",", ".", as.character(commodity[,2])))
commodity <- commodity[!is.na(commodity)]
#trabalhar com objetos TS é mais facil então...
commodity <- ts(commodity, start = c(1998, 1), frequency = 12)
ibovespa <- ts(ibovespa, start = c(1987, 1), frequency = 12)
juros <- ts(juros, start = c(1986, 7), frequency = 12)
inflacao <- ts(inflacao, start = c(1980, 1), frequency = 12)
indust <- ts(indust, start = c(2002, 1), frequency = 12)
#masini de ultima hora mudou a variavel de interesse pra variação do índice de produção industrial
indust <- diff(indust)
#contruindo a matriz pra usar no modelo VAR e conrtando as variaveis pra ficarem do mesmo length
df <- ts.intersect(commodity, ibovespa, juros, inflacao, indust)
#sempre bom ver os dados
plot(df[,1]) #commodity
plot(df[,2]) #ibovespa
plot(df[,3]) #juros
plot(df[,4]) #inflacao
plot(df[,5]) #indust
#vamo ver se esses trem são estacionario
apply(df, 2, adf.test)
apply(df, 2, Box.test)
#tem alguns jeitos de arrumar
plot(diff(df[,1])) #commodity
plot(diff(df[,3])) #juros
#ou assim?
plot(decompose(df[,1])$random) #commodity
plot(decompose(df[,3])$random) #juros
#tirando a diferença da pra entender melhor
commodity <- diff(commodity)
juros <- diff(juros)
#ajustando a matriz pras novas variaveis
df <- ts.intersect(commodity, ibovespa, juros, inflacao, indust)
commodity <- df[,1]
ibovespa <- df[,2]
juros <- df[,3]
inflacao <- df[,4]
predict(arima(indust, c(2,0,2)) n.ahead=1))
predict(arima(indust, c(2,0,2)) n.ahead=1)
arima(indust, c(2,0,2)
)
predict(arima(indust, c(2,0,2)))
predict(arima(indust, c(2,0,2)))$pred
length(fit)
length(indust)
seriePreditaARIMA <- gerarSerieARIMA(indust, MaxDefasagens = 80, ordem = c(2,0,2))
erroQuadradoARIMA <- calcResiduos(indust, seriePreditaARIMA, defasagens = 80)
predizerARIMA <- function(df, ordem = c(2,0,2), h1 = 1){
fit <- arima(df, ordem)
a <- predict(fit, n.ahead = h1)
y_predito <- predict(arima(indust, c(2,0,2)))$pred
return(y_predito)
}
gerarSerieARIMA <- function(df, MaxDefasagens=20, ordem=c(2,0,2), h1 = 1){
resultSet <- df
resultSet[(length(df)-MaxDefasagens+1):length(df)] <- 0
for(i in 1:MaxDefasagens){
serieX <- head(df, (length(df)-MaxDefasagens+i))
predicX <- predizer(serieX, ordem=ordem, h1=h1)
resultSet[length(resultSet)-MaxDefasagens+i] <- predicX
}
return(resultSet)
}
calcResiduosARIMA <- function(serieOri, serieCortada, defasagens){
errosTot <- vector()
for(i in 1:defasagens){
erroX <- serieOri[length(serieOri)-defasagens+i] - serieCortada[length(serieOri)-defasagens+i]
erroXX <- erroX^2
errosTot <- append(errosTot, erroXX)
}
sumErros <- mean(errosTot)
return(sumErros)
}
seriePreditaARIMA <- gerarSerieARIMA(indust, MaxDefasagens = 80, ordem = c(2,0,2))
erroQuadradoARIMA <- calcResiduos(indust, seriePreditaARIMA, defasagens = 80)
seriePreditaARIMA <- gerarSerieARIMA(indust, MaxDefasagens = 80, ordem = c(2,0,2))
predizerARIMA <- function(df, ordem = c(2,0,2), h1 = 1){
fit <- arima(df, ordem)
a <- predict(fit, n.ahead = h1)
y_predito <- predict(arima(indust, c(2,0,2)))$pred
return(y_predito)
}
gerarSerieARIMA <- function(df, MaxDefasagens=20, ordem=c(2,0,2), h1 = 1){
resultSet <- df
resultSet[(length(df)-MaxDefasagens+1):length(df)] <- 0
for(i in 1:MaxDefasagens){
serieX <- head(df, (length(df)-MaxDefasagens+i))
predicX <- predizerARIMA(serieX, ordem=ordem, h1=h1)
resultSet[length(resultSet)-MaxDefasagens+i] <- predicX
}
return(resultSet)
}
calcResiduosARIMA <- function(serieOri, serieCortada, defasagens){
errosTot <- vector()
for(i in 1:defasagens){
erroX <- serieOri[length(serieOri)-defasagens+i] - serieCortada[length(serieOri)-defasagens+i]
erroXX <- erroX^2
errosTot <- append(errosTot, erroXX)
}
sumErros <- mean(errosTot)
return(sumErros)
}
seriePreditaARIMA <- gerarSerieARIMA(indust, MaxDefasagens = 80, ordem = c(2,0,2))
erroQuadradoARIMA <- calcResiduosARIMA(indust, seriePreditaARIMA, defasagens = 80)
plot(seriePreditaARIMA)
predizerARIMA(indust)
predizerARIMA(indust[-length(indust)])
predizerARIMA(indust[-(length(indust)+1)])
predizerARIMA <- function(df, ordem = c(2,0,2), h1 = 1){
fit <- arima(df, ordem)
a <- predict(fit, n.ahead = h1)
y_predito <- predict(arima(df, c(2,0,2)))$pred
return(y_predito)
}
predizerARIMA(indust[-length(indust)])
predizerARIMA(indust[-(length(indust)+1)])
predizerARIMA <- function(df, ordem = c(2,0,2), h1 = 1){
fit <- arima(df, ordem)
a <- predict(fit, n.ahead = h1)
y_predito <- predict(arima(df, c(2,0,2)))$pred
return(y_predito)
}
gerarSerieARIMA <- function(df, MaxDefasagens=20, ordem=c(2,0,2), h1 = 1){
resultSet <- df
resultSet[(length(df)-MaxDefasagens+1):length(df)] <- 0
for(i in 1:MaxDefasagens){
serieX <- head(df, (length(df)-MaxDefasagens+i))
predicX <- predizerARIMA(serieX, ordem=ordem, h1=h1)
resultSet[length(resultSet)-MaxDefasagens+i] <- predicX
}
return(resultSet)
}
calcResiduosARIMA <- function(serieOri, serieCortada, defasagens){
errosTot <- vector()
for(i in 1:defasagens){
erroX <- serieOri[length(serieOri)-defasagens+i] - serieCortada[length(serieOri)-defasagens+i]
erroXX <- erroX^2
errosTot <- append(errosTot, erroXX)
}
sumErros <- mean(errosTot)
return(sumErros)
}
seriePreditaARIMA <- gerarSerieARIMA(indust, MaxDefasagens = 80, ordem = c(2,0,2))
erroQuadradoARIMA <- calcResiduosARIMA(indust, seriePreditaARIMA, defasagens = 80)
erroQuadradoARIMA
plot(seriePreditaARIMA)
predizer <- function(df, ordem = 1, h1 = 1, h2 = 0, posNoDf = 5){
#df = matriz de variaveis endogenas
#ordem = ordem do modelo VAR
#h1 = horizonte minimo a ser predito
#h2 = horizonte maximo adicional a ser predito
#posNoDf = posição da variavel relavante no dataframe, no caso do tut é 5
#caso o Masini fale "ah, mas eu não sei o que essa função predict faz":
#https://cran.r-project.org/web/packages/vars/vars.pdf
h2 <- h1 + h2
fit <- VAR(df, ordem)
a <- predict(fit, n.ahead = h2)
y_predito <- a$fcst[[posNoDf]][,1][h1:h2]
return(y_predito)
}
gerarSerie <- function(df, MaxDefasagens=20, ordem=1, h1 = 1, h2 = 0, posNoDf = 5){
#MaxDefasagens = numero maximo de periodos que serão preditos
#essa função cria uma série prevendo um periodo a frente a variavel de interesse
#não recomendo mudar h1 nem h2
resultSet <- df[,posNoDf]
resultSet[(length(df[,posNoDf])-MaxDefasagens+1):length(df[,posNoDf])] <- 0
for(i in 1:MaxDefasagens){
serieX <- head(df, (length(df[,posNoDf])-MaxDefasagens+i))
predicX <- predizer(serieX, ordem=ordem, h1=h1, h2=h2, posNoDf=posNoDf)
resultSet[length(resultSet)-MaxDefasagens+i] <- predicX
}
return(resultSet)
}
calcResiduos <- function(serieOri, serieCortada, defasagens){
#colocar "defasagens" como um numero maior ou igua ao MaxDefasagens das outras funções
errosTot <- vector()
for(i in 1:defasagens){
erroX <- serieOri[length(serieOri)-defasagens+i] - serieCortada[length(serieOri)-defasagens+i]
erroXX <- erroX^2
errosTot <- append(errosTot, erroXX)
}
sumErros <- mean(errosTot)
#sumErros <- sum(errosTot)
return(sumErros)
}
crossValid <- function(df, MaxDefasagens=20, maxp = 20, posNoDf = 5){
#maxp = maior parametro P do modelo VAR que será testado no cross validation
informacao <- vector()
for(i in 1:maxp){
seriePredita <- gerarSerie(df, MaxDefasagens = MaxDefasagens, ordem = i, posNoDf = posNoDf)
erroQuadrado <- calcResiduos(df[,posNoDf], seriePredita, defasagens = MaxDefasagens)
informacao <- append(informacao, erroQuadrado)
}
return(informacao)
}
crossValid(df, MaxDefasagens = 80)
df <- ts.intersect(ibovespa, juros, inflacao, indust)
seriePreditaVAR <- gerarSerie(df, MaxDefasagens = 80, posNoDf = 4)
ts.plot(seriePreditaARIMA, seriePreditaVAR)
ts.plot(seriePreditaARIMA, seriePreditaVAR, indust)
ts.plot(seriePreditaARIMA, seriePreditaVAR, indust, colors = c("yellow", "red"))
ts.plot(seriePreditaARIMA, seriePreditaVAR, indust, colors = c("yellow", "red", "green"))
plot(seriePreditaARIMA, col ="yellow")
plot(seriePreditaARIMA, col ="green")
lines(seriePreditaVAR, col = "red")
lines(indust)
windows()
plot(seriePreditaARIMA, col ="green")
lines(seriePreditaVAR, col = "red")
lines(indust)
plot(seriePreditaARIMA, col ="purple")
lines(seriePreditaVAR, col = "red")
lines(indust)
plot(seriePreditaARIMA, col ="brown")
lines(seriePreditaVAR, col = "red")
plot(seriePreditaARIMA, col ="pink")
lines(seriePreditaVAR, col = "red")
lines(indust)
plot(seriePreditaARIMA, col ="pink")
lines(seriePreditaVAR, col = "red")
lines(indust, col = "green")
plot(indust, col = "green")
lines(seriePreditaARIMA, col ="purple")
lines(seriePreditaVAR, col = "red")
windows()
plot(indust, col = "green")
lines(seriePreditaARIMA, col ="purple")
lines(seriePreditaVAR, col = "red")
plot(indust)
lines(seriePreditaARIMA, col ="purple")
lines(seriePreditaVAR, col = "red")
windows()
plot(indust)
lines(seriePreditaARIMA, col ="purple")
lines(seriePreditaVAR, col = "red")
plot(indust[100:187])
windows()
plot(indust[100:187], type = "l")
lines(seriePreditaARIMA[100:187], col ="purple")
lines(seriePreditaVAR[100:187], col = "red")
library(sandwich)
NeweyWest(x = fit12)
fit12 <- lm(indust[2:188] ~ indust[1:187] + commodity[1:187] + ibovespa[1:187] + inflacao[1:187] + juros[1:187])
NeweyWest(x = fit12)
coeftest(fit12, vcov. = NeweyWest)
summary(fit12)
