impulse = impulse, ortho = ortho, cumulative = cumulative,
runs = runs, ci = ci, boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
####################
bootstrap <- function (x, n.ahead, runs, ortho, cumulative, impulse, response,
ci, seed, y.names)
{
if (!(is.null(seed)))
set.seed(abs(as.integer(seed)))
if (class(x) == "varest") {
VAR <- eval.parent(x)
}
else if (class(x) == "svarest") {
VAR <- eval.parent(x$var)
}
else {
stop("Bootstrap not implemented for this class.\n")
}
p <- VAR$p
K <- VAR$K
obs <- VAR$obs
total <- VAR$totobs
type <- VAR$type
B <- Bcoef(VAR)
BOOT <- vector("list", runs)
ysampled <- matrix(0, nrow = total, ncol = K)
colnames(ysampled) <- colnames(VAR$y)
Zdet <- NULL
if (ncol(VAR$datamat) > (K * (p + 1))) {
Zdet <- as.matrix(VAR$datamat[, (K * (p + 1) + 1):ncol(VAR$datamat)])
}
resorig <- scale(resid(VAR), scale = FALSE)
B <- Bcoef(VAR)
for (i in 1:runs) {
booted <- sample(c(1:obs), replace = TRUE)
resid <- resorig[booted, ]
lasty <- c(t(VAR$y[p:1, ]))
ysampled[c(1:p), ] <- VAR$y[c(1:p), ]
for (j in 1:obs) {
lasty <- lasty[1:(K * p)]
Z <- c(lasty, Zdet[j, ])
ysampled[j + p, ] <- B %*% Z + resid[j, ]
lasty <- c(ysampled[j + p, ], lasty)
}
varboot <- update(VAR, y = ysampled)
if (class(x) == "svarest") {
varboot <- update(x, x = varboot)
}
BOOT[[i]] <- foo(x = varboot, n.ahead = n.ahead, ortho = ortho,
cumulative = cumulative, impulse = impulse, response = response,
y.names = y.names)
}
lower <- ci/2
upper <- 1 - ci/2
mat.l <- matrix(NA, nrow = n.ahead + 1, ncol = length(response))
mat.u <- matrix(NA, nrow = n.ahead + 1, ncol = length(response))
Lower <- list()
Upper <- list()
idx1 <- length(impulse)
idx2 <- length(response)
idx3 <- n.ahead + 1
temp <- rep(NA, runs)
for (j in 1:idx1) {
for (m in 1:idx2) {
for (l in 1:idx3) {
for (i in 1:runs) {
if (idx2 > 1) {
temp[i] <- BOOT[[i]][[j]][l, m]
}
else {
temp[i] <- matrix(BOOT[[i]][[j]])[l, m]
}
}
mat.l[l, m] <- quantile(temp, lower, na.rm = TRUE)
mat.u[l, m] <- quantile(temp, upper, na.rm = TRUE)
}
}
colnames(mat.l) <- response
colnames(mat.u) <- response
Lower[[j]] <- mat.l
Upper[[j]] <- mat.u
}
names(Lower) <- impulse
names(Upper) <- impulse
result <- list(Lower = Lower, Upper = Upper)
return(result)
}
xxx <- svarest(fit2)
plot(xxx)
irs
library(vars)
library(TED)
setwd("C:\\Users\\User 2014\\Desktop\\FGV\\FGV\\6Semestre\\Econometria 2\\tut10")
inflacao <- read.csv("inflacao.csv", sep = "\t")
inflacao <- as.numeric(gsub(",", ".", as.character(inflacao[,3])))
inflacao <- inflacao[!is.na(inflacao)]
#mesma coisa pra selic mensal
juros <- read.csv2("selic.csv")
juros <- as.numeric(gsub(",", ".", as.character(juros[,2])))
juros <- juros[!is.na(juros)]
juros <- ts(juros, start = c(1986, 7), frequency = 12)
inflacao <- ts(inflacao, start = c(1980, 1), frequency = 12)
####
df <- ts.intersect(juros, inflacao)
df <- window(df, start = c(2000, 1))
plot(df[,1])
VARselect(df)
fit <- VAR(df, p = 5)
res <- residuals(fit)
apply(res, 2, Box.test)
#Ou voce normaliza o B ou o U
#normalizando os choques estruturais temos um U ~ (0, In)
# SIGMA = var(Yt) = t(C) %*% C
sigm <- cov(res)
c_matrix <- chol(sigm)
t(c_matrix) %*% c_matrix
a_matrix <- lapply(Acoef(fit), function(x){solve(c_matrix) %*% x})
b_matrix <- solve(c_matrix)
restr <- diag(2)
#restr[upper.tri(restr, diag = T)] <- NA
restr[lower.tri(restr, diag = T)] <- NA
fit2 <- SVAR(fit, Amat = restr)
plot(irf(SVAR(fit, Amat = restr)))
a_matrix
plot(df[,1])
plot(df[,1])
plot(df[,2])
plot(df[,1])
plot(df[,2])
apply(df, 2, adf.test)
library(tseries)
apply(df, 2, adf.test)
apply(res, 2, Box.test)
plot(fit2)
plot(irf(fit2))
df <- ts.intersect(inflacao, juros)
df <- window(df, start = c(2000, 1))
fit <- VAR(df, p = 5)
res <- residuals(fit)
sigm <- cov(res)
c_matrix <- chol(sigm)
t(c_matrix) %*% c_matrix
a_matrix <- lapply(Acoef(fit), function(x){solve(c_matrix) %*% x})
b_matrix <- solve(c_matrix)
restr <- diag(2)
restr[lower.tri(restr, diag = T)] <- NA
SVAR(fit, Amat = restr)
plot(irf(SVAR(fit, Amat = restr)))
####
plot(irf(SVAR(fit, Amat = restr)))
plot(irf(fit2, n.ahead = 5))
plot(irf(fit2, n.ahead = 40))
Phi(fit2)
foo <- function (x, impulse, response, y.names, n.ahead)
{
#essa função basicamente calcula o impulso resposta pra cada variavel
#dependendo do lag das outras variaveis e dela mesma
#a função Phi faz o segunte:
#Returns the estimated coefficient matrices of the moving average representation of
#a stable VAR(p), of an SVAR as an array or a converted VECM to VAR.
irf <- Phi(x, nstep = n.ahead)
dimnames(irf) <- list(y.names, y.names, NULL)
idx <- length(impulse)
irs <- list()
for (i in 1:idx) {
#esse loop extrai de forma bonita os coeficientes o modelo MA
#pra cada uma das variaveis e salva numa lista
irs[[i]] <- matrix(t(irf[response, impulse[i], 1:(n.ahead + 1)]), nrow = n.ahead + 1)
print(irf[response, impulse[i], 1:(n.ahead + 1)])
colnames(irs[[i]]) <- response
}
names(irs) <- impulse
result <- irs
return(result)
}
##########################################
svarest <- function (x, n.ahead = 10, cumulative = FALSE, boot = TRUE)
{
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse, cumulative = cumulative,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2)
plot(xxx)
plot(xxx)
{
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse, cumulative = cumulative,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2)
plot(xxx)
xxx <- svarest(fit2)
svarest <- function (x, n.ahead = 10, boot = TRUE)
{
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2)
plot(xxx)
{
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2)
svarest <- function (x, n.ahead = 10, boot = TRUE)
{
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
svarest <- function (x, n.ahead = 10, boot = TRUE)
{
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead)
result <- list(irf = irs, response = response,
impulse = impulse,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2)
plot(xxx)
foo <- function (x, impulse, response, y.names, n.ahead)
{
#essa função basicamente calcula o impulso resposta pra cada variavel
#dependendo do lag das outras variaveis e dela mesma
#a função Phi faz o segunte:
#Returns the estimated coefficient matrices of the moving average representation of
#a stable VAR(p), of an SVAR as an array or a converted VECM to VAR.
irf <- Phi(x, nstep = n.ahead)
dimnames(irf) <- list(y.names, y.names, NULL)
idx <- length(impulse)
irs <- list()
for (i in 1:idx) {
#esse loop extrai de forma bonita os coeficientes o modelo MA
#pra cada uma das variaveis e salva numa lista
irs[[i]] <- matrix(t(irf[response, impulse[i], 1:(n.ahead + 1)]), nrow = n.ahead + 1)
print(irf[response, impulse[i], 1:(n.ahead + 1)])
colnames(irs[[i]]) <- response
}
names(irs) <- impulse
result <- irs
return(result)
}
svarest <- function (x, n.ahead = 10, boot = TRUE)
{
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead)
result <- list(irf = irs, response = response,
impulse = impulse,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2)
plot(xxx)
foo <- function (x, impulse, response, y.names, n.ahead, cumulative)
{
#essa função basicamente calcula o impulso resposta pra cada variavel
#dependendo do lag das outras variaveis e dela mesma
#a função Phi faz o segunte:
#Returns the estimated coefficient matrices of the moving average representation of
#a stable VAR(p), of an SVAR as an array or a converted VECM to VAR.
irf <- Phi(x, nstep = n.ahead)
dimnames(irf) <- list(y.names, y.names, NULL)
idx <- length(impulse)
irs <- list()
for (i in 1:idx) {
#esse loop extrai de forma bonita os coeficientes o modelo MA
#pra cada uma das variaveis e salva numa lista
irs[[i]] <- matrix(t(irf[response, impulse[i], 1:(n.ahead + 1)]), nrow = n.ahead + 1)
print(irf[response, impulse[i], 1:(n.ahead + 1)])
colnames(irs[[i]]) <- response
}
names(irs) <- impulse
result <- irs
return(result)
}
##########################################
svarest <- function (x, n.ahead = 10, cumulative = FALSE, boot = TRUE)
{
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse, cumulative = cumulative,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2)
plot(xxx)
plot(xxx)
plot(xxx)
plot(xxx)
getAnywhere(Phi)
methods(Phi)
getAnywhere(Phi.svarest)
getAnywhere(.Phi)
getAnywhere(Phi)
Phi
getAnywhere(Phi.)
getAnywhere(Phi)
methods(Phi)
plot(foo(fit2))
plot(foo(fit2, n.ahead = 10))
foo <- function (x, n.ahead, cumulative)
{
#essa função basicamente calcula o impulso resposta pra cada variavel
#dependendo do lag das outras variaveis e dela mesma
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
#a função Phi faz o segunte:
#Returns the estimated coefficient matrices of the moving average representation of
#a stable VAR(p), of an SVAR as an array or a converted VECM to VAR.
irf <- Phi(x, nstep = n.ahead)
dimnames(irf) <- list(y.names, y.names, NULL)
idx <- length(impulse)
irs <- list()
for (i in 1:idx) {
#esse loop extrai de forma bonita os coeficientes o modelo MA
#pra cada uma das variaveis e salva numa lista
irs[[i]] <- matrix(t(irf[response, impulse[i], 1:(n.ahead + 1)]), nrow = n.ahead + 1)
print(irf[response, impulse[i], 1:(n.ahead + 1)])
colnames(irs[[i]]) <- response
}
names(irs) <- impulse
result <- irs
return(result)
}
##########################################
svarest <- function (x, n.ahead = 10, cumulative = FALSE, boot = TRUE)
{
#fodasse essa função, ela só agrega uns trem ai
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse, cumulative = cumulative,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2)
svarest <- function (x, n.ahead = 10, cumulative = FALSE, boot = TRUE)
{
#fodasse essa função, ela só agrega uns trem ai
irs <- foo(x = x, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse, cumulative = cumulative,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2)
plot(xxx)
plot(foo(fit2, n.ahead = 10))
xxx$impulse
foo <- function (x, impulse, response, y.names, n.ahead, cumulative)
{
#essa função basicamente calcula o impulso resposta pra cada variavel
#dependendo do lag das outras variaveis e dela mesma
#a função Phi faz o segunte:
#Returns the estimated coefficient matrices of the moving average representation of
#a stable VAR(p), of an SVAR as an array or a converted VECM to VAR.
irf <- Phi(x, nstep = n.ahead)
dimnames(irf) <- list(y.names, y.names, NULL)
idx <- length(impulse)
irs <- list()
for (i in 1:idx) {
#esse loop extrai de forma bonita os coeficientes o modelo MA
#pra cada uma das variaveis e salva numa lista
irs[[i]] <- matrix(t(irf[response, impulse[i], 1:(n.ahead + 1)]), nrow = n.ahead + 1)
print(irf[response, impulse[i], 1:(n.ahead + 1)])
colnames(irs[[i]]) <- response
}
names(irs) <- impulse
result <- irs
return(result)
}
##########################################
svarest <- function (x, n.ahead = 10, cumulative = FALSE, boot = TRUE)
{
#fodasse essa função, ela só agrega uns trem ai pra deixar plotavel
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse, cumulative = cumulative,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
inflacao <- read.csv("inflacao.csv", sep = "\t")
inflacao <- as.numeric(gsub(",", ".", as.character(inflacao[,3])))
inflacao <- inflacao[!is.na(inflacao)]
juros <- read.csv2("selic.csv")
juros <- as.numeric(gsub(",", ".", as.character(juros[,2])))
juros <- juros[!is.na(juros)]
juros <- ts(juros, start = c(1986, 7), frequency = 12)
inflacao <- ts(inflacao, start = c(1980, 1), frequency = 12)
#### vamo la
#claramente tinha uma quebra estrutural na variancia antes de 2000 e pouco, não quero lidar com isso
df <- ts.intersect(juros, inflacao)
df <- window(df, start = c(2000, 1))
fit <- VAR(df, p = 5)
restr <- diag(2)
restr[lower.tri(restr, diag = T)] <- NA
fit2 <- SVAR(fit, Amat = restr)
foo <- function (x, impulse, response, y.names, n.ahead, cumulative)
{
#essa função basicamente calcula o impulso resposta pra cada variavel
#dependendo do lag das outras variaveis e dela mesma
#a função Phi faz o segunte:
#Returns the estimated coefficient matrices of the moving average representation of
#a stable VAR(p), of an SVAR as an array or a converted VECM to VAR.
irf <- Phi(x, nstep = n.ahead)
dimnames(irf) <- list(y.names, y.names, NULL)
idx <- length(impulse)
irs <- list()
for (i in 1:idx) {
#esse loop extrai de forma bonita os coeficientes o modelo MA
#pra cada uma das variaveis e salva numa lista
irs[[i]] <- matrix(t(irf[response, impulse[i], 1:(n.ahead + 1)]), nrow = n.ahead + 1)
print(irf[response, impulse[i], 1:(n.ahead + 1)])
colnames(irs[[i]]) <- response
}
names(irs) <- impulse
result <- irs
return(result)
}
##########################################
svarest <- function (x, n.ahead = 10, cumulative = FALSE, boot = TRUE)
{
#fodasse essa função, ela só agrega uns trem ai pra deixar plotavel
y.names <- colnames(x$var$y)
impulse <- y.names
response <- y.names
irs <- foo(x = x, impulse = impulse, response = response,
y.names = y.names, n.ahead = n.ahead,
cumulative = cumulative)
result <- list(irf = irs, response = response,
impulse = impulse, cumulative = cumulative,
boot = boot, model = class(x))
class(result) <- "varirf"
return(result)
}
xxx <- svarest(fit2, n.ahead = 40)
plot(xxx)
plot(xxx)
plot(xxx)
xxx <- svarest(fit2, n.ahead = 10)
plot(xxx)
